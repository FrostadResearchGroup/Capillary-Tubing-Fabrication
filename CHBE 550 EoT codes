# -*- coding: utf-8 -*-
"""
Created on Tue Nov 28 16:11:32 2017

@author: jlapucha
"""

#reactor design script for end-of-term paper
import numpy as np
import scipy as sci
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.integrate import odeint
import math as math
import csv
from pylab import *
import os
##################################
#global variables
Deff= 19.0E-6 #effective diffusivity in m^2/s
r= 2.0E-9 #pore radius in m
vacant_sites= 0.7 #oxygen vacant sites ratio 
#Khw= reaction_rate/(0.8259E6*(math.sqrt(0.0799E6))-(39/1.67E-7))*vacant_sites**2 #Hougen-Watson rate constant
CO_0= 0.1338 #initial concentration of CO in moles
R= 8.314 #ideal gas constant
E_a= -120000 #literature value of activation energy
A= 1E14
SA_BET= 43.8 #area of catalyst surface reaction in m^2/g
p= 0.4 #bed porosity fraction
dir_name= os.getcwd() + '/'
saveFile= dir_name + 'output.csv'
####################################
#problem 1
#defining necessary functions
#calculating activation energy as A


#k_1= -28916/(483*8.314)
#k= np.exp(k_1)
##calculating preexponential factor
#A= 1.035E-6/(k*0.001156*.68*(12.588-.475))

#defining KHW intrinsic as function of temperature in Kelvin
def K_T(T):
    E_a= 120000.0
    R= 8.314
    k_t= A*np.exp(-1*E_a/(R*T))
    return k_t



#Thiele modulus
def TM_EF(T, L, C, args= float):
    E_a= 120000
    A= 1E14
    R= 8.314
    phi= math.sqrt((2*A*np.exp(-1*E_a/(R*T))*(L**2)*C)/(Deff*r))
    eta= (3/phi**2)*(phi*(1/np.tanh(phi))-1)
    return eta
#passing numerical values into TM function
 

#effectiveness factor 
#def E_F(phi):
#    eta= (np.tanh(phi))/phi
#    return  eta

#trying different form of effectiveness factor
def E_F_1(phi):
    eta= (3/phi**2)*(phi*(1/np.tanh(phi))-1)
    return eta
    
#particle size 
particle_size= np.linspace(8E-9,15E-9, num=50)
particle_size_1 = list(particle_size)
temp_range=np.linspace(453.0, 573.0, 10.0)
temp_range_1 = list(temp_range)

Khw= K_T(temp_range)

#Eta_example= np.zeros(10, 5, dtype= float)
#Eta= np.zeros_like(Eta_example, dtype= float)
#Eta= np.empty([50,10], dtype= float)
x= np.arange(500, dtype= np.float)
x = x.reshape((50, 10))
Eta= np.empty_like(x)
#for i in temp_range:
##    Eta.append(i)
#    for j in particle_size:
##       Eta.append(j)
#       Eta_value= TM_EF(i, j, CO_0)
#       print Eta_value
#       Eta= np.append(Eta_value,i,j)
Eta= []  
for i in temp_range:
    for j in particle_size:
#        np.vectorize(Eta.append(TM_EF(i, j, CO_0)))
         Eta.append(TM_EF(i, j, CO_0))
def Conversion_ode_catalyst_1 (X,T,eta,y,x): 
#    P_0= C_0*R*T
#    C= C_0*(1-x[0])
    Epsilon= -1.0
    alpha= -1*(3.5E12)/T
    X[:,0]= eta*A*np.exp(-1*E_a/(R*T))*SA_BET*(CO_0*(1-x)/(1+Epsilon*x))**2/(y**2)
    X[:,1]= alpha/(2*y)*(1+(Epsilon*x))
    dX_dw= [X[:,0],X[:,1]]
    return dX_dw
#    dC1_dzeta1= x[1]
#    x[2]= phi**2*x[0]
#    dC_dzeta= [x[0],x[1],x[2]]


#defining initial conditions
X0= [0.1,0.1]
x0= np.linspace(0.01,1,10)
y0= np.linspace(0,1,10)
Eta_value= np.array(Eta)
Eta_value_1= np.linspace(1,10,100)
for m in range(len(Eta)):
    solve_catalyst_ode_1= odeint(Conversion_ode_catalyst_1(X0,temp_range,Eta[m],y0,x0))

plt.plot(temp_range,solve_catalyst_ode_1[:,0], 'b', label= 'conversion vs temp' )
plt.plot(particle_size, solve_catalyst_ode_1[:,0], 'g', label= 'conversion vs diameter')
plt.legend(loc='best')
plt.xlabel('temperature')
plt.ylabel('conversion')
plt.show()
plt.clf()
plt.cla()
plt.close()
#plt.plot(t, sol[:, 0], 'b', label='theta(t)')
#>>> plt.plot(t, sol[:, 1], 'g', label='omega(t)')
#>>> plt.legend(loc='best')
#>>> plt.xlabel('t')
#>>> plt.grid()
#>>> plt.show()


#problem 2 differential equation
def Conversion_ode_catalyst_2 (X,T,x,eta,y): 
    Epsilon= -1.0
    X[:,0]= eta*A*np.exp(-1*E_a/(R*T))*SA_BET*(C_0*(1-x)/(1+Epsilon*x))**2
    dX_dw= [X[:,0]]
    return dX_dw
#solving ode for conversion
solve_ode_catalyst_2(Conversion_ode_catalyst_2(X0,temp_range,X0,x,Eta_value)

     
#with open(saveFile, 'wb') as csvfile:
#    writer = csv.writer(csvfile)
#    writer.writerow([['Temperatures'], ['Particle Size'], ['Effectiveness factor']])
##    writer.writerow(['Particle Size'])
##    writer.writerow(['Effectiveness factor'])
#    for i in range(len(temp_range)):
#        for j in range(len(particle_size)):
##        writer.writerow(['Temperatures'])
#            writer.writerow([temp_range[i], particle_size[j],Eta])
##        for j in range(len(particle_size)):
##            writer.writerow([particle_size[j]])
        #writer.writerow([Eta[i,j]])
      
     
#plotting effectiveness factor versus temperature of catalyst surface and particle size
#fig = plt.figure()
#ax = plt.axes(projection='3d') 
#x= particle_size
#y= np.linspace(453, 573, 50)

#xplot_1= len(z_1)
#X, Y= np.meshgrid(xplot, yplot)
#ax.contour3D(X, Y, z_1 , 50, cmap='binary')
#ax.set_xlabel('x')
#ax.set_ylabel('y')
#ax.set_zlabel('z');
##fig= plt.figure()
##fig= plt.plot(Eta, )
##plt.show
##plt.semilogx(concVec,avgSurfaceTen,'k^')
##plt.title('TritonX-100 Isotherm, ' + NumericalMethodName + str(avgTemp) + ' degrees C')
##plt. xlabel('Concentration (mM)')
##plt.ylabel('Surface Tension, mN/m')
##plt.errorbar(concVec,avgSurfaceTen,yerr=np.std(stdDevSurfTenVec),fmt=' ')
#    
#def Conversion_ode_catalyst (T,x): 
#    P_0= C_0*R*T
#    C= C_0*(1-x[0])
#    dC1_dzeta1= x[1]
#    x[2]= phi**2*x[0]
#    dC_dzeta= [x[0],x[1],x[2]]
#    return dC_dzeta
#
##defining initial conditions
#x0= [0.1,0.1,0]
#C0= [0,1]
#zeta_0= particle_size
#solve_catalyst_ode= odeint(Conversion_ode_catalyst,x0, Phi_1,args=(C0,zeta_0))
#xplot= solve_catalyst_ode[:,2]
#yplot= zeta_0
#z= [solve_catalyst_ode[:,1],solve_catalyst_ode[:,2]]
#assert len (z)==(len (xplot)* len(yplot))
#z= np.array(zplot) 
#assert len (z)==(len (xplot)* len(yplot)) 
#zplot_1= [xplot, yplot]
#z_1= np.array(zplot_1)
##plotting effectiveness factor versus pore size versus conversion
#
#
#fig = plt.figure()
#ax = plt.axes(projection='3d') 
#x= np.linspace(0, 1E-6, 50)  
#y= np.linspace(0,1,50)
#z= np.linspace(0,1, 50)
#
#xplot_1= len(z_1)
#X, Y= np.meshgrid(xplot, yplot)
#ax.contour3D(X, Y, z_1 , 50, cmap='binary')
#ax.set_xlabel('x')
#ax.set_ylabel('y')
#ax.set_zlabel('z');


#zeros.like x, y - to get array for surface response
#error response
#using different effectiveness factor- Abner- using objective function to get conversion to given Xa value- use as constraint- 92% conversion at 210 C  
#boundary_conditions= [r/(8E-9)*.8, r/(15E-9)*1.2]
#order of mag is important
#care about A, Ea, K for give- A is similar for uncatalyzed- similar for catalyzed
#get input values from literatures- make sure Ea is less than that for unctalyzed- make a constraint
#Nelder Mead for optimizing- but Abner gets different results for error depending on method chosen
